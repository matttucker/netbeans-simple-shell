/**
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original  Software is Simple Shell. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc.
 *
 * Matt Tucker, Sun Microsystems
 *
 */
package com.sun.datastorage.shell.ui;

import com.sun.datastorage.shell.*;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

import java.io.Serializable;
import javax.swing.SwingUtilities;
import org.openide.ErrorManager;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;

import org.openide.util.lookup.Lookups;
import org.openide.windows.Mode;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
public final class ShellTopComponent extends TopComponent implements
        PropertyChangeListener, ShellProvider {

    private static ShellTopComponent instance;
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "com/sun/datastorage/shell/resources/shell_16x16.png";
    private static final String PREFERRED_ID = "ShellTopComponent";
    ShellDocument shellDoc;
    Lookup.Result result = null;

    public ShellTopComponent() {
        initComponents();


        setToolTipText(NbBundle.getMessage(ShellTopComponent.class, "HINT_ShellTopComponent"));

        associateLookup(Lookups.singleton(shellEditorPane.getDocument()));
//        setIcon(Utilities.loadImage(ICON_PATH, true));

        String name = NbBundle.getMessage(ShellTopComponent.class, "CTL_ShellTopComponent");
        setName(name);
        setDisplayName(name + ":" + getShellId());
    }

    public ShellTopComponent(int id) {
        this();
        getShellDocument().setShellId(id);
        String name = NbBundle.getMessage(ShellTopComponent.class, "CTL_ShellTopComponent");
        setName(name);
        setDisplayName(name + ":" + getShellId());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        shellEditorPane = new ShellEditorPane();

        jScrollPane1.setDoubleBuffered(true);

        shellEditorPane.setContentType("text/x-shell");
        shellEditorPane.setToolTipText("shell");
        shellEditorPane.setDoubleBuffered(true);
        ((ShellEditorPane) shellEditorPane).init();
        ((ShellEditorPane) shellEditorPane).addWeakShellPropertyChangeListener(this);
        jScrollPane1.setViewportView(shellEditorPane);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JEditorPane shellEditorPane;
    // End of variables declaration//GEN-END:variables
    // End of variables declaration

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     * @return
     */
    public static synchronized ShellTopComponent getDefault() {
        if (instance == null) {
            instance = new ShellTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the ShellTopComponent instance. Never call {@link #getDefault} directly!
     * @return
     */
    public static synchronized ShellTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            ErrorManager.getDefault().log(ErrorManager.WARNING, "Cannot find Shell component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof ShellTopComponent) {
            return (ShellTopComponent) win;
        }

        ErrorManager.getDefault().log(ErrorManager.WARNING, "There seem to be multiple components with the '" + PREFERRED_ID + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    /**
     * Obtain the ShellTopComponent instance. Never call {@link #getDefault} directly!
     * @return
     */
    public static synchronized ShellTopComponent findInstance(int shellId) {
        Mode myMode = WindowManager.getDefault().findMode("editor"); // editor or explorer or whatever you want
        if (myMode != null) {
            for (TopComponent t : myMode.getTopComponents()) {
                if (t instanceof ShellTopComponent) {
                    ShellTopComponent st = (ShellTopComponent) t;

                    if (shellId == st.getShellId() || (shellId == -1)) {
                        return st;
                    }

                }
            }
        }
        return null;
    }

    public int getShellId() {
        ShellDocument doc = (ShellDocument) shellEditorPane.getDocument();
        return doc.getShellId();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ONLY_OPENED;
    }

    @SuppressWarnings(value = "unchecked")
    @Override
    public void componentOpened() {
        setDisplayName(getName() + ":" + getShellId());


    }

    @Override
    public void componentClosed() {

        ShellEditorDocument doc = (ShellEditorDocument) shellEditorPane.getDocument();
        doc.close();
    }

    @Override
    public void componentActivated() {
        super.componentActivated();
        shellEditorPane.requestFocusInWindow();
    }

    /**
     *
     * @return
     */
    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    @Override
    public ShellDocument getShellDocument() {
        return (ShellDocument) shellEditorPane.getDocument();
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        String propertyName = evt.getPropertyName();
        if (ShellEditorPane.PROP_SHELL_TITLE.equals(propertyName)) {

            final String newTitle = (String) evt.getNewValue();
            SwingUtilities.invokeLater(new Runnable() {

                @Override
                public void run() {
                    setDisplayName(newTitle + ":" + getShellId());
                }
            });
        }
    }
   /** replaces this in object stream */
    public
    @Override
    Object writeReplace() {
        return new ResolvableHelper();
    }



    final static class ResolvableHelper implements Serializable {

        private static final long serialVersionUID = 1L;

        public Object readResolve() {
            return ShellTopComponent.getDefault();
        }
    }
    
    @Override
    protected void finalize() throws Throwable {
        System.out.println("close shell top component");
        super.finalize();
    }
}
