/**
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original  Software is Simple Shell. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc.
 *
 * Matt Tucker, Sun Microsystems
 *
 */
package com.sun.datastorage.shell.options;

import com.sun.datastorage.shell.ShellDocument;
import com.sun.datastorage.shell.ShellEditorDocument;
import java.util.ArrayList;
import java.util.List;
import java.util.prefs.PreferenceChangeEvent;
import java.util.prefs.PreferenceChangeListener;
import java.util.prefs.Preferences;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.script.ScriptEngineFactory;
import javax.script.ScriptEngineManager;
import javax.swing.DefaultListModel;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import org.openide.util.NbBundle;
import org.openide.util.NbPreferences;

public class ShellGeneralOptionsPanel extends ShellOptionsPanel {

    private ShellOptionsPanelController controller;
    private Preferences pref;
    private PathListModel pathListModel = new PathListModel();

    public ShellGeneralOptionsPanel() {

        initComponents();

        ScriptEngineManager scriptMgr = new ScriptEngineManager();
        List<ScriptEngineFactory> engineFactories = scriptMgr.getEngineFactories();
        ArrayList<String> engineNames = new ArrayList<String>(engineFactories.size()) {
        };
        for (ScriptEngineFactory engine : engineFactories) {
            engineNames.add(engine.getLanguageName());
        }
        engineComboBox.setModel(new javax.swing.DefaultComboBoxModel(engineNames.toArray()));
        String engine = NbPreferences.forModule(ShellEditorDocument.class).get(ShellEditorDocument.PROP_SHELL_SCRIPT_ENGINE, ShellEditorDocument.SCRIPT_ENGINE_DEFAULT);
        engineComboBox.setSelectedItem(engine);
        int lineLimit = NbPreferences.forModule(ShellEditorDocument.class).getInt(ShellEditorDocument.PROP_SHELL_LINE_LIMIT, ShellEditorDocument.LINE_LIMIT_DEFAULT);
        lineLimitField.setText(Integer.toString(lineLimit));
        pathList.setCellRenderer(new PathListCellRenderer());

        lineLimitField.setInputVerifier(new InputVerifier() {


            @Override
            public boolean verify(JComponent input) {
                String text = ((JTextField) input).getText();
                Pattern p = Pattern.compile("^(\\d*)$");
                Matcher m = p.matcher(text);
                if (m.matches()) {
                    return true;
                } else {
                    JOptionPane.showMessageDialog(input, "Only integers are allowed.",
          "Input Validation", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
            }
        });
    }

    @Override
    public String getName() {
        return NbBundle.getMessage(ShellGeneralOptionsPanel.class, "ShellGeneralOptionsPanel.name");
    }

    @Override
    public void setController(ShellOptionsPanelController ctrlr) {
        controller = ctrlr;

        pref = NbPreferences.forModule(ShellDocument.class);

        // listen to changes in form fields and call controller.changed()
        pref.addPreferenceChangeListener(new PreferenceChangeListener() {

            @Override
            public void preferenceChange(PreferenceChangeEvent evt) {
                if (evt.getKey().equals(ShellEditorDocument.PROP_SHELL_PATH)) {
                    pathListModel.set(evt.getNewValue());
                    controller.changed();
                } else if (evt.getKey().equals(ShellEditorDocument.PROP_SHELL_LINE_LIMIT)) {
                    lineLimitField.setText(evt.getNewValue());
                }
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        pathList = new javax.swing.JList();
        downButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        removeButton = new javax.swing.JButton();
        upButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        engineComboBox = new javax.swing.JComboBox();
        scriptEngineLabel = new javax.swing.JLabel();
        lineLimitField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        startupCmdLabel = new javax.swing.JLabel();
        startupCmdField = new javax.swing.JTextField();

        pathList.setModel(pathListModel);
        pathList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                pathListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(pathList);

        org.openide.awt.Mnemonics.setLocalizedText(downButton, "Down");
        downButton.setEnabled(false);
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(addButton, "Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, "Path List:");

        org.openide.awt.Mnemonics.setLocalizedText(removeButton, "Remove");
        removeButton.setEnabled(false);
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(upButton, "Up");
        upButton.setEnabled(false);
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(editButton, org.openide.util.NbBundle.getMessage(ShellGeneralOptionsPanel.class, "ShellGeneralOptionsPanel.editButton")); // NOI18N
        editButton.setEnabled(false);
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                .add(downButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(upButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(removeButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(addButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .add(editButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 71, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jLabel1))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(addButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(removeButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(editButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(upButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(downButton))
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE))
                .addContainerGap())
        );

        engineComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                engineComboBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(scriptEngineLabel, org.openide.util.NbBundle.getMessage(ShellGeneralOptionsPanel.class, "ShellGeneralOptionsPanel.scriptEngineLabel.text")); // NOI18N

        lineLimitField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineLimitFieldActionPerformed(evt);
            }
        });
        lineLimitField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                lineLimitFieldKeyPressed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, "Max Lines:");

        org.openide.awt.Mnemonics.setLocalizedText(startupCmdLabel, org.openide.util.NbBundle.getMessage(ShellGeneralOptionsPanel.class, "ShellGeneralOptionsPanel.startupCmdLabel.text")); // NOI18N

        startupCmdField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startupCmdFieldActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(startupCmdLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(startupCmdField))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(scriptEngineLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(engineComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 140, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(lineLimitField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 65, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(89, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(26, 26, 26)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(scriptEngineLabel)
                    .add(engineComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2)
                    .add(lineLimitField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(startupCmdLabel)
                    .add(startupCmdField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
    int index = pathList.getSelectedIndex();

    if (index >= 0 && index != pathListModel.getSize() - 1) {
        String path = (String) pathListModel.get(index);
        pathListModel.removeElementAt(index);
        pathListModel.insertElementAt(path, ++index);
        pathList.setSelectedIndex(index);
        pathList.ensureIndexIsVisible(index);
    }
}//GEN-LAST:event_downButtonActionPerformed

private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
    int index = pathList.getSelectedIndex();

    if (index > 0) {
        String path = (String) pathListModel.get(index);
        pathListModel.removeElementAt(index);
        pathListModel.insertElementAt(path, --index);
        pathList.setSelectedIndex(index);
        pathList.ensureIndexIsVisible(index);
    }

}//GEN-LAST:event_upButtonActionPerformed

private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
    int index = pathList.getSelectedIndex();
    if (index != -1) {
        pathListModel.remove(index);

        int size = pathListModel.getSize();

        if (size == 0) { //Nobody's left, disable remove, up, down
            removeButton.setEnabled(false);
            upButton.setEnabled(false);
            downButton.setEnabled(false);
            editButton.setEnabled(false);
        } else {
            if (size == 1) {
                upButton.setEnabled(false);
                downButton.setEnabled(false);
            }
            if (index == pathListModel.getSize()) {
                //removed item in last position
                index--;
            }

            pathList.setSelectedIndex(index);
            pathList.ensureIndexIsVisible(index);
        }
    }
}//GEN-LAST:event_removeButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        AddPathDialog dialog = new AddPathDialog(new javax.swing.JFrame(), true);

        dialog.setVisible(true);
        dialog.dispose();

        if (dialog.getReturnStatus() == AddPathDialog.RET_OK) {
            String path = dialog.getPath();

            if (!path.isEmpty()) {

                String[] paths = path.split(";");


                for (String aPath : paths) {
                    int index = pathList.getSelectedIndex(); //get selected index
                    if (index == -1) {
                        //no selection, so insert at beginning
                        index = 0;
                    } else {
                        //add after the selected item
                        index++;
                    }
                    if (pathListModel.indexOf(aPath) == -1) {
                        // only add unique paths.
                        aPath = aPath.replace('\\', '/');
                        pathListModel.insertElementAt(aPath, index);
                    }
                }


            }


            int listSize = pathListModel.getSize();
            if (listSize > 0) {
                removeButton.setEnabled(true);
                editButton.setEnabled(true);

                if (listSize > 1) {
                    upButton.setEnabled(true);
                    downButton.setEnabled(true);

                }
            }
        }

    }//GEN-LAST:event_addButtonActionPerformed

    private void engineComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_engineComboBoxActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_engineComboBoxActionPerformed

    private void startupCmdFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startupCmdFieldActionPerformed
    }//GEN-LAST:event_startupCmdFieldActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        int index = pathList.getSelectedIndex();
        if (index != -1) {
            String path = (String) pathListModel.get(index);
            AddPathDialog dialog = new AddPathDialog(new javax.swing.JFrame(), true, path);

            dialog.setVisible(true);
            dialog.dispose();
            if (dialog.getReturnStatus() == AddPathDialog.RET_OK) {
                path = dialog.getPath();

                if (!path.isEmpty()) {
                    path = path.replace('\\', '/');

                    if (pathListModel.indexOf(path) == -1) {
                        // only add unique paths.
                        pathListModel.set(index, path);
                    }
                }
            }

        }

}//GEN-LAST:event_editButtonActionPerformed

    private void pathListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_pathListValueChanged

        int index = pathList.getSelectedIndex();
        int size = pathListModel.size();
        if (index == -1) {
            //nothing selected
            editButton.setEnabled(false);
            removeButton.setEnabled(false);
            upButton.setEnabled(false);
            downButton.setEnabled(false);
        } else {
            editButton.setEnabled(true);
            removeButton.setEnabled(true);
            if (size == 1) {
                upButton.setEnabled(false);
                downButton.setEnabled(false);
            } else {
                if (index == 0) {
                    upButton.setEnabled(false);
                    downButton.setEnabled(true);
                } else if (index == size - 1) {
                    upButton.setEnabled(true);
                    downButton.setEnabled(false);
                } else {
                    upButton.setEnabled(true);
                    downButton.setEnabled(true);
                }
            }
        }
    }//GEN-LAST:event_pathListValueChanged

    private void lineLimitFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lineLimitFieldKeyPressed
    }//GEN-LAST:event_lineLimitFieldKeyPressed

    private void lineLimitFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineLimitFieldActionPerformed
    }//GEN-LAST:event_lineLimitFieldActionPerformed

    @Override
    public void load() {
        pathListModel.set(NbPreferences.forModule(ShellEditorDocument.class).get(ShellEditorDocument.PROP_SHELL_PATH, ""));

        engineComboBox.setSelectedItem(
                NbPreferences.forModule(ShellEditorDocument.class).get(ShellDocument.PROP_SHELL_SCRIPT_ENGINE, ShellDocument.SCRIPT_ENGINE_DEFAULT));
        lineLimitField.setText(Integer.toString(
                NbPreferences.forModule(ShellEditorDocument.class).getInt(ShellDocument.PROP_SHELL_LINE_LIMIT, ShellDocument.LINE_LIMIT_DEFAULT)));
        startupCmdField.setText(
                NbPreferences.forModule(ShellEditorDocument.class).get(ShellDocument.PROP_SHELL_STARTUP_CMD, ShellDocument.STARTUP_CMD_DEFAULT));
    }

    @Override
    public void store() {
        NbPreferences.forModule(ShellEditorDocument.class).put(ShellDocument.PROP_SHELL_PATH, pathListModel.toString());
        NbPreferences.forModule(ShellEditorDocument.class).put(ShellDocument.PROP_SHELL_SCRIPT_ENGINE, engineComboBox.getSelectedItem().toString());
        NbPreferences.forModule(ShellEditorDocument.class).putInt(ShellDocument.PROP_SHELL_LINE_LIMIT, Integer.parseInt(lineLimitField.getText()));
        NbPreferences.forModule(ShellEditorDocument.class).put(ShellDocument.PROP_SHELL_STARTUP_CMD, startupCmdField.getText());
    }

    @Override
    public boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton downButton;
    private javax.swing.JButton editButton;
    private javax.swing.JComboBox engineComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lineLimitField;
    private javax.swing.JList pathList;
    private javax.swing.JButton removeButton;
    private javax.swing.JLabel scriptEngineLabel;
    private javax.swing.JTextField startupCmdField;
    private javax.swing.JLabel startupCmdLabel;
    private javax.swing.JButton upButton;
    // End of variables declaration//GEN-END:variables

    class PathListModel extends DefaultListModel {

        public PathListModel() {
        }

        @Override
        public String toString() {
            if (this.isEmpty()) {
                return "";
            } else {
                StringBuffer pathStr = new StringBuffer();

                pathStr.append((String) get(0));
                for (int i = 1; i < getSize(); i++) {
                    pathStr.append(";" + (String) get(i));
                }

                return pathStr.toString();
            }
        }

        /**
         * Unflattens a path string where paths are separated by ';' into the list.
         */
        void set(String paths) {
            clear();
            String[] somePaths = paths.split(";");
            for (String path : somePaths) {
                if (path.length() > 0) {
                    addElement(path);
                }
            }
        }
    }
}
