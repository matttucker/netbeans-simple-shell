/**
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original  Software is Simple Shell. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc.
 *
 * Matt Tucker, Sun Microsystems
 *
 */
package com.sun.datastorage.shell.server;

import java.io.Serializable;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.rmi.server.UnicastRemoteObject;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.PreferenceChangeEvent;
import java.util.prefs.PreferenceChangeListener;
import java.util.prefs.Preferences;
import javax.swing.SwingWorker;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.netbeans.api.progress.ProgressHandle;
import org.netbeans.api.progress.ProgressHandleFactory;

//import org.openide.util.Utilities;
/**
 * Top component which displays something.
 */
final class ServerTopComponent extends TopComponent {

    private static ServerTopComponent instance;
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "com/sun/datastorage/shell/server/resources/server.png";
    private static final String PREFERRED_ID = "ServerTopComponent";
    private ConnectionModel connectionsModel;
    private Server server;
    private java.rmi.registry.Registry registry;
    private Preferences pref;
    int port = -1;

    private ServerTopComponent() {
        initComponents();
        setServerStatus(false);

        pref = Preferences.userNodeForPackage(Server.class);
        // listen to changes in form fields and call controller.changed()
        pref.addPreferenceChangeListener(new PreferenceChangeListener() {

            @Override
            public void preferenceChange(PreferenceChangeEvent evt) {

                if (evt.getKey().equals(Server.RMI_SERVER_PORT_PROP)) {

                    int newPort = pref.getInt(Server.RMI_SERVER_PORT_PROP, Server.RMI_SERVER_PORT_DEFAULT);
                    if (newPort != port) {
                        port = newPort;
                        unregisterRmi();
                        registerRmi(port);
                    }

                }
            }
        });
        setName(NbBundle.getMessage(ServerTopComponent.class, "CTL_ServerTopComponent"));
        setToolTipText(NbBundle.getMessage(ServerTopComponent.class, "HINT_ServerTopComponent"));
//        setIcon(Utilities.loadImage(ICON_PATH, true));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        ipLabel = new javax.swing.JLabel();
        serverPortLabel = new javax.swing.JLabel();
        portLabel = new javax.swing.JLabel();
        serverStatus = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, "jButton1");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Connection", "Active"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, "Server IP:");

        org.openide.awt.Mnemonics.setLocalizedText(ipLabel, "jLabel2");

        serverPortLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        org.openide.awt.Mnemonics.setLocalizedText(serverPortLabel, "Server Port:");
        serverPortLabel.setToolTipText("");

        org.openide.awt.Mnemonics.setLocalizedText(portLabel, "jLabel2");

        serverStatus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/sun/datastorage/shell/server/resources/error.png"))); // NOI18N
        serverStatus.setToolTipText("Server Status:");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1, 0, 0, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(ipLabel)
                        .add(18, 18, 18)
                        .add(serverPortLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(portLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(serverStatus)))
                .addContainerGap(111, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(ipLabel)
                    .add(serverPortLabel)
                    .add(portLabel)
                    .add(serverStatus))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 85, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ipLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel portLabel;
    private javax.swing.JLabel serverPortLabel;
    private javax.swing.JLabel serverStatus;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized ServerTopComponent getDefault() {
        if (instance == null) {
            instance = new ServerTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the ServerTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized ServerTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(ServerTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof ServerTopComponent) {
            return (ServerTopComponent) win;
        }
        Logger.getLogger(ServerTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    public
    @Override
    int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    public
    @Override
    void componentOpened() {

        port = pref.getInt(Server.RMI_SERVER_PORT_PROP, Server.RMI_SERVER_PORT_DEFAULT);
        unregisterRmi();
        registerRmi(port);

    }

    public
    @Override
    void componentClosed() {
        unregisterRmi();
    }

    void registerRmi(final int port) {
        final ProgressHandle handle = ProgressHandleFactory.createHandle(NbBundle.getMessage(ServerTopComponent.class, "PROGRESS_ServerTopComponent"));
        connectionsModel = new ConnectionModel();
        jTable1.setModel(connectionsModel);


        SwingWorker worker = new SwingWorker<Void, Void>() {

            @Override
            public void done() {
                handle.finish();
            }

            @Override
            protected Void doInBackground() {
                handle.start();
                //String codeBase = pref.get(Server.RMI_SERVER_CODEBASE_PROP, Server.RMI_SERVER_CODEBASE_DEFAULT);
                //System.setProperty("java.rmi.server.codebase", codeBase);
                System.out.println("java.rmi.server.codebase =" + System.getProperty("java.rmi.server.codebase"));
                System.out.flush();
                //System.out.println("codebase= " + System.getProperty("java.rmi.server.codebase"));
                try {
                    registry = java.rmi.registry.LocateRegistry.createRegistry(port);
                    System.out.println("RMI registry started on port " + port + " . ");
                    System.out.flush();
                    server = new Server(connectionsModel);
                    if (server.isEnabled()) {
                        setServerStatus(true);
                    }

                } catch (Exception ex) {
                    String errorMsg = "RMI registry could not be started on port " + port + " . ";
                    setServerStatus(false);
                    registry = null;
                    Logger.getLogger(ServerTopComponent.class.getName()).log(Level.SEVERE, errorMsg, ex);


                }


                return null;
            }
        };
        worker.execute();
        try {
            InetAddress thisIp = InetAddress.getLocalHost();
            ipLabel.setText(thisIp.getHostAddress());
        } catch (UnknownHostException ex) {
            String errorMsg = "Unknown host";
            Logger.getLogger(ServerTopComponent.class.getName()).log(Level.SEVERE, errorMsg, ex);
        }
        portLabel.setText(String.valueOf(port));
    }

    void unregisterRmi() {
        setServerStatus(false);
        if (registry != null) {
            try {
                boolean successful = UnicastRemoteObject.unexportObject(registry, true);
                if (successful) {
                    System.out.println("RMI registry removed sucessfully.");
                } else {
                    System.out.println("RMI registry removal unsucessful!!!!");
                }
            } catch (Exception ex) {
                String errorMsg = "Problem removing RMI registry from JVM.";
                Logger.getLogger(ServerTopComponent.class.getName()).log(Level.WARNING, errorMsg, ex);
            } finally {
                registry = null;
            }
        }
    }

    void setServerStatus(boolean on) {
        if (on) {
            serverStatus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/sun/datastorage/shell/server/resources/active.png")));
            serverStatus.setToolTipText("Server Status: ON");
        } else {
            serverStatus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/sun/datastorage/shell/server/resources/error.png")));
            serverStatus.setToolTipText("Server Status: OFF");
        }
    }

    /** replaces this in object stream */
    public
    @Override
    Object writeReplace() {
        return new ResolvableHelper();
    }

    protected
    @Override
    String preferredID() {
        return PREFERRED_ID;
    }

    final static class ResolvableHelper implements Serializable {

        private static final long serialVersionUID = 1L;

        public Object readResolve() {
            return ServerTopComponent.getDefault();
        }
    }
}
